<?xml version="1.0" encoding="UTF-8"?>
<project name="valley-of-bones" default="all">
  
  
  <property file="valley-of-bones-client.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.apk"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.7" value="${jdk.home.1.7}/bin"/>
  <path id="jdk.classpath.1.7">
    <fileset dir="${jdk.home.1.7}">
      <include name="jre/lib/compilefontconfig.jar"/>
      <include name="jre/lib/rhino.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/javazic.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
      <include name="jre/lib/ext/pulse-java.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/java-atk-wrapper.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.7}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.7}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.7"/>
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <pathelement location="${javac2.home}/javac2.jar"/>
    <pathelement location="${javac2.home}/jdom.jar"/>
    <pathelement location="${javac2.home}/asm4-all.jar"/>
    <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module valley-of-bones -->
  
  <dirname property="module.valley-of-bones.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.valley-of-bones" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.valley-of-bones" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.valley-of-bones" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.valley-of-bones" value="${compiler.args}"/>
  
  <property name="valley-of-bones.output.dir" value="${module.valley-of-bones.basedir}/bin"/>
  <property name="valley-of-bones.testoutput.dir" value="${module.valley-of-bones.basedir}/bin"/>
  
  <path id="valley-of-bones.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="valley-of-bones.module.production.classpath">
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl.jar"/>
    <pathelement location="${basedir}/libs/gdx-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal.jar"/>
    <pathelement location="${basedir}/libs/kryonet-debug-2.18-all.jar"/>
    <path refid="${module.jdk.classpath.valley-of-bones}"/>
    <pathelement location="${idea.home}/lib/junit-4.10.jar"/>
  </path>
  
  <path id="valley-of-bones.runtime.production.module.classpath">
    <pathelement location="${valley-of-bones.output.dir}"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl.jar"/>
    <pathelement location="${basedir}/libs/gdx-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal.jar"/>
    <pathelement location="${basedir}/libs/kryonet-debug-2.18-all.jar"/>
    <pathelement location="${idea.home}/lib/junit-4.10.jar"/>
  </path>
  
  <path id="valley-of-bones.module.classpath">
    <pathelement location="${valley-of-bones.output.dir}"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl.jar"/>
    <pathelement location="${basedir}/libs/gdx-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal.jar"/>
    <pathelement location="${basedir}/libs/kryonet-debug-2.18-all.jar"/>
    <path refid="${module.jdk.classpath.valley-of-bones}"/>
    <pathelement location="${idea.home}/lib/junit-4.10.jar"/>
  </path>
  
  <path id="valley-of-bones.runtime.module.classpath">
    <pathelement location="${valley-of-bones.output.dir}"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-backend-lwjgl.jar"/>
    <pathelement location="${basedir}/libs/gdx-natives.jar"/>
    <pathelement location="${basedir}/libs/gdx-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal-sources.jar"/>
    <pathelement location="${basedir}/libs/gdx-openal.jar"/>
    <pathelement location="${basedir}/libs/kryonet-debug-2.18-all.jar"/>
    <pathelement location="${idea.home}/lib/junit-4.10.jar"/>
  </path>
  
  
  <patternset id="excluded.from.module.valley-of-bones">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.valley-of-bones">
    <patternset refid="excluded.from.module.valley-of-bones"/>
  </patternset>
  
  <path id="valley-of-bones.module.sourcepath">
    <dirset dir="${module.valley-of-bones.basedir}">
      <include name="src"/>
      <include name="assets"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.valley-of-bones" depends="compile.module.valley-of-bones.production,compile.module.valley-of-bones.tests" description="Compile module valley-of-bones"/>
  
  <target name="compile.module.valley-of-bones.production" depends="register.custom.compilers" description="Compile module valley-of-bones; production classes">
    <mkdir dir="${valley-of-bones.output.dir}"/>
    <javac2 target="1.6" source="1.6" destdir="${valley-of-bones.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.valley-of-bones}/javac">
      <compilerarg line="${compiler.args.valley-of-bones}"/>
      <bootclasspath refid="valley-of-bones.module.bootclasspath"/>
      <classpath refid="valley-of-bones.module.production.classpath"/>
      <src refid="valley-of-bones.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.valley-of-bones"/>
    </javac2>
    
    <copy todir="${valley-of-bones.output.dir}">
      <fileset dir="${module.valley-of-bones.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.valley-of-bones.basedir}/assets">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.valley-of-bones.tests" depends="register.custom.compilers,compile.module.valley-of-bones.production" description="compile module valley-of-bones; test classes" unless="skip.tests"/>
  
  <target name="clean.module.valley-of-bones" description="cleanup module">
    <delete dir="${valley-of-bones.output.dir}"/>
    <delete dir="${valley-of-bones.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.valley-of-bones" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.valley-of-bones" description="build all modules"/>

  <tstamp />

  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.valleyofbones:jar" value="${basedir}/out/artifacts/${DSTAMP}"/>
    <property name="artifact.output.valleyofbonesserver:jar" value="${basedir}/out/artifacts/${DSTAMP}"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.ValleyOfBones.jar" value="${artifacts.temp.dir}/ValleyOfBones.jar"/>
    <property name="temp.jar.path.ValleyOfBonesServer.jar" value="${artifacts.temp.dir}/ValleyOfBonesServer.jar"/>
  </target>

  <target name="artifact.valleyofbones:jar" depends="init.artifacts, compile.module.valley-of-bones" description="Build &#39;ValleyOfBones:jar&#39; artifact">
    <property name="artifact.temp.output.valleyofbones:jar" value="${artifacts.temp.dir}/ValleyOfBones_jar"/>
    <mkdir dir="${artifact.temp.output.valleyofbones:jar}"/>
    <manifest file="src/META-INF/MANIFEST.MF">
      <attribute name="Built-By" value="Jami Couch"/>
      <attribute name="Created-By" value="Jami Couch"/>
      <attribute name="Main-Class" value="com.ahsgaming.valleyofbones.VOBGame"/>
      <attribute name="Built-Date" value="${TODAY}"/>
    </manifest>

    <jar destfile="${temp.jar.path.ValleyOfBones.jar}" duplicate="preserve" manifest="src/META-INF/MANIFEST.MF" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${valley-of-bones.output.dir}"/>
      <zipfileset src="${basedir}/libs/gdx-sources.jar"/>
      <zipfileset src="${basedir}/libs/gdx-openal-sources.jar"/>
      <zipfileset src="${basedir}/libs/kryonet-debug-2.18-all.jar"/>
      <zipfileset src="${basedir}/libs/gdx-natives.jar"/>
      <zipfileset src="${basedir}/libs/gdx.jar"/>
      <zipfileset src="${basedir}/libs/gdx-openal.jar"/>
      <zipfileset src="${basedir}/libs/gdx-backend-lwjgl.jar"/>
      <zipfileset src="${basedir}/libs/gdx-backend-lwjgl-sources.jar"/>
      <zipfileset src="${basedir}/libs/gdx-backend-lwjgl-natives.jar"/>
    </jar>
    <copy file="${temp.jar.path.ValleyOfBones.jar}" tofile="${artifact.temp.output.valleyofbones:jar}/ValleyOfBones.jar"/>
  </target>
  
  <target name="artifact.valleyofbonesserver:jar" depends="init.artifacts, compile.module.valley-of-bones" description="Build &#39;ValleyOfBonesServer:jar&#39; artifact">
    <property name="artifact.temp.output.valleyofbonesserver:jar" value="${artifacts.temp.dir}/ValleyOfBonesServer_jar"/>
    <mkdir dir="${artifact.temp.output.valleyofbonesserver:jar}"/>
    <manifest file="src/META-INF/MANIFEST.MF">
      <attribute name="Built-By" value="Jami Couch"/>
      <attribute name="Created-By" value="Jami Couch"/>
      <attribute name="Main-Class" value="com.ahsgaming.valleyofbones.ServerMain"/>
      <attribute name="Built-Date" value="${TODAY}"/>
    </manifest>
    <jar destfile="${temp.jar.path.ValleyOfBonesServer.jar}" duplicate="preserve" manifest="src/META-INF/MANIFEST.MF" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${valley-of-bones.output.dir}"/>
      <zipfileset src="${basedir}/libs/gdx-sources.jar"/>
      <zipfileset src="${basedir}/libs/gdx-openal-sources.jar"/>
      <zipfileset src="${basedir}/libs/kryonet-debug-2.18-all.jar"/>
      <zipfileset src="${basedir}/libs/gdx-natives.jar"/>
      <zipfileset src="${basedir}/libs/gdx.jar"/>
      <zipfileset src="${basedir}/libs/gdx-openal.jar"/>
      <zipfileset src="${basedir}/libs/gdx-backend-lwjgl.jar"/>
      <zipfileset src="${basedir}/libs/gdx-backend-lwjgl-sources.jar"/>
      <zipfileset src="${basedir}/libs/gdx-backend-lwjgl-natives.jar"/>
    </jar>
    <copy file="${temp.jar.path.ValleyOfBonesServer.jar}" tofile="${artifact.temp.output.valleyofbonesserver:jar}/ValleyOfBonesServer.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.valleyofbones:jar, artifact.valleyofbonesserver:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.valleyofbones:jar}"/>
    <copy todir="${artifact.output.valleyofbones:jar}">
      <fileset dir="${artifact.temp.output.valleyofbones:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.valleyofbonesserver:jar}"/>
    <copy todir="${artifact.output.valleyofbonesserver:jar}">
      <fileset dir="${artifact.temp.output.valleyofbonesserver:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>

  <target name="package.artifacts" depends="build.all.artifacts" description="Package into zip file">
      <zip destfile="${artifacts.temp.dir}/ValleyOfBones-${DSTAMP}.zip">
          <fileset dir="${artifact.output.valleyofbones:jar}" includes="*.jar" />
          <fileset file="${basedir}/README.md" />
      </zip>
      <copy todir="${artifact.output.valleyofbones:jar}">
          <fileset file="${artifacts.temp.dir}/ValleyOfBones-${DSTAMP}.zip"/>
      </copy>
      <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts, package.artifacts" description="build all"/>
</project>